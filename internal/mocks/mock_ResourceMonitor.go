// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	interfaces "grabarr/internal/interfaces"

	mock "github.com/stretchr/testify/mock"
)

// MockResourceMonitor is an autogenerated mock type for the ResourceMonitor type
type MockResourceMonitor struct {
	mock.Mock
}

type MockResourceMonitor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockResourceMonitor) EXPECT() *MockResourceMonitor_Expecter {
	return &MockResourceMonitor_Expecter{mock: &_m.Mock}
}

// GetMetrics provides a mock function with no fields
func (_m *MockResourceMonitor) GetMetrics() map[string]interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMetrics")
	}

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// MockResourceMonitor_GetMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetrics'
type MockResourceMonitor_GetMetrics_Call struct {
	*mock.Call
}

// GetMetrics is a helper method to define mock.On call
func (_e *MockResourceMonitor_Expecter) GetMetrics() *MockResourceMonitor_GetMetrics_Call {
	return &MockResourceMonitor_GetMetrics_Call{Call: _e.mock.On("GetMetrics")}
}

func (_c *MockResourceMonitor_GetMetrics_Call) Run(run func()) *MockResourceMonitor_GetMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockResourceMonitor_GetMetrics_Call) Return(_a0 map[string]interface{}) *MockResourceMonitor_GetMetrics_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockResourceMonitor_GetMetrics_Call) RunAndReturn(run func() map[string]interface{}) *MockResourceMonitor_GetMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// GetResourceStatus provides a mock function with no fields
func (_m *MockResourceMonitor) GetResourceStatus() interfaces.ResourceStatus {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetResourceStatus")
	}

	var r0 interfaces.ResourceStatus
	if rf, ok := ret.Get(0).(func() interfaces.ResourceStatus); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(interfaces.ResourceStatus)
	}

	return r0
}

// MockResourceMonitor_GetResourceStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResourceStatus'
type MockResourceMonitor_GetResourceStatus_Call struct {
	*mock.Call
}

// GetResourceStatus is a helper method to define mock.On call
func (_e *MockResourceMonitor_Expecter) GetResourceStatus() *MockResourceMonitor_GetResourceStatus_Call {
	return &MockResourceMonitor_GetResourceStatus_Call{Call: _e.mock.On("GetResourceStatus")}
}

func (_c *MockResourceMonitor_GetResourceStatus_Call) Run(run func()) *MockResourceMonitor_GetResourceStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockResourceMonitor_GetResourceStatus_Call) Return(_a0 interfaces.ResourceStatus) *MockResourceMonitor_GetResourceStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockResourceMonitor_GetResourceStatus_Call) RunAndReturn(run func() interfaces.ResourceStatus) *MockResourceMonitor_GetResourceStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockResourceMonitor creates a new instance of MockResourceMonitor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockResourceMonitor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockResourceMonitor {
	mock := &MockResourceMonitor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
