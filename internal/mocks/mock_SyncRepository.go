// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	models "grabarr/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// MockSyncRepository is an autogenerated mock type for the SyncRepository type
type MockSyncRepository struct {
	mock.Mock
}

type MockSyncRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSyncRepository) EXPECT() *MockSyncRepository_Expecter {
	return &MockSyncRepository_Expecter{mock: &_m.Mock}
}

// CreateSyncJob provides a mock function with given fields: syncJob
func (_m *MockSyncRepository) CreateSyncJob(syncJob *models.SyncJob) error {
	ret := _m.Called(syncJob)

	if len(ret) == 0 {
		panic("no return value specified for CreateSyncJob")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.SyncJob) error); ok {
		r0 = rf(syncJob)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSyncRepository_CreateSyncJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSyncJob'
type MockSyncRepository_CreateSyncJob_Call struct {
	*mock.Call
}

// CreateSyncJob is a helper method to define mock.On call
//   - syncJob *models.SyncJob
func (_e *MockSyncRepository_Expecter) CreateSyncJob(syncJob interface{}) *MockSyncRepository_CreateSyncJob_Call {
	return &MockSyncRepository_CreateSyncJob_Call{Call: _e.mock.On("CreateSyncJob", syncJob)}
}

func (_c *MockSyncRepository_CreateSyncJob_Call) Run(run func(syncJob *models.SyncJob)) *MockSyncRepository_CreateSyncJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.SyncJob))
	})
	return _c
}

func (_c *MockSyncRepository_CreateSyncJob_Call) Return(_a0 error) *MockSyncRepository_CreateSyncJob_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSyncRepository_CreateSyncJob_Call) RunAndReturn(run func(*models.SyncJob) error) *MockSyncRepository_CreateSyncJob_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSyncJob provides a mock function with given fields: id
func (_m *MockSyncRepository) DeleteSyncJob(id int64) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSyncJob")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSyncRepository_DeleteSyncJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSyncJob'
type MockSyncRepository_DeleteSyncJob_Call struct {
	*mock.Call
}

// DeleteSyncJob is a helper method to define mock.On call
//   - id int64
func (_e *MockSyncRepository_Expecter) DeleteSyncJob(id interface{}) *MockSyncRepository_DeleteSyncJob_Call {
	return &MockSyncRepository_DeleteSyncJob_Call{Call: _e.mock.On("DeleteSyncJob", id)}
}

func (_c *MockSyncRepository_DeleteSyncJob_Call) Run(run func(id int64)) *MockSyncRepository_DeleteSyncJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockSyncRepository_DeleteSyncJob_Call) Return(_a0 error) *MockSyncRepository_DeleteSyncJob_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSyncRepository_DeleteSyncJob_Call) RunAndReturn(run func(int64) error) *MockSyncRepository_DeleteSyncJob_Call {
	_c.Call.Return(run)
	return _c
}

// GetActiveSyncJobsCount provides a mock function with no fields
func (_m *MockSyncRepository) GetActiveSyncJobsCount() (int, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetActiveSyncJobsCount")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSyncRepository_GetActiveSyncJobsCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActiveSyncJobsCount'
type MockSyncRepository_GetActiveSyncJobsCount_Call struct {
	*mock.Call
}

// GetActiveSyncJobsCount is a helper method to define mock.On call
func (_e *MockSyncRepository_Expecter) GetActiveSyncJobsCount() *MockSyncRepository_GetActiveSyncJobsCount_Call {
	return &MockSyncRepository_GetActiveSyncJobsCount_Call{Call: _e.mock.On("GetActiveSyncJobsCount")}
}

func (_c *MockSyncRepository_GetActiveSyncJobsCount_Call) Run(run func()) *MockSyncRepository_GetActiveSyncJobsCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSyncRepository_GetActiveSyncJobsCount_Call) Return(_a0 int, _a1 error) *MockSyncRepository_GetActiveSyncJobsCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSyncRepository_GetActiveSyncJobsCount_Call) RunAndReturn(run func() (int, error)) *MockSyncRepository_GetActiveSyncJobsCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetSyncJob provides a mock function with given fields: id
func (_m *MockSyncRepository) GetSyncJob(id int64) (*models.SyncJob, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetSyncJob")
	}

	var r0 *models.SyncJob
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*models.SyncJob, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) *models.SyncJob); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SyncJob)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSyncRepository_GetSyncJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSyncJob'
type MockSyncRepository_GetSyncJob_Call struct {
	*mock.Call
}

// GetSyncJob is a helper method to define mock.On call
//   - id int64
func (_e *MockSyncRepository_Expecter) GetSyncJob(id interface{}) *MockSyncRepository_GetSyncJob_Call {
	return &MockSyncRepository_GetSyncJob_Call{Call: _e.mock.On("GetSyncJob", id)}
}

func (_c *MockSyncRepository_GetSyncJob_Call) Run(run func(id int64)) *MockSyncRepository_GetSyncJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockSyncRepository_GetSyncJob_Call) Return(_a0 *models.SyncJob, _a1 error) *MockSyncRepository_GetSyncJob_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSyncRepository_GetSyncJob_Call) RunAndReturn(run func(int64) (*models.SyncJob, error)) *MockSyncRepository_GetSyncJob_Call {
	_c.Call.Return(run)
	return _c
}

// GetSyncJobs provides a mock function with given fields: filter
func (_m *MockSyncRepository) GetSyncJobs(filter models.SyncFilter) ([]*models.SyncJob, error) {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for GetSyncJobs")
	}

	var r0 []*models.SyncJob
	var r1 error
	if rf, ok := ret.Get(0).(func(models.SyncFilter) ([]*models.SyncJob, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(models.SyncFilter) []*models.SyncJob); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.SyncJob)
		}
	}

	if rf, ok := ret.Get(1).(func(models.SyncFilter) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSyncRepository_GetSyncJobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSyncJobs'
type MockSyncRepository_GetSyncJobs_Call struct {
	*mock.Call
}

// GetSyncJobs is a helper method to define mock.On call
//   - filter models.SyncFilter
func (_e *MockSyncRepository_Expecter) GetSyncJobs(filter interface{}) *MockSyncRepository_GetSyncJobs_Call {
	return &MockSyncRepository_GetSyncJobs_Call{Call: _e.mock.On("GetSyncJobs", filter)}
}

func (_c *MockSyncRepository_GetSyncJobs_Call) Run(run func(filter models.SyncFilter)) *MockSyncRepository_GetSyncJobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.SyncFilter))
	})
	return _c
}

func (_c *MockSyncRepository_GetSyncJobs_Call) Return(_a0 []*models.SyncJob, _a1 error) *MockSyncRepository_GetSyncJobs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSyncRepository_GetSyncJobs_Call) RunAndReturn(run func(models.SyncFilter) ([]*models.SyncJob, error)) *MockSyncRepository_GetSyncJobs_Call {
	_c.Call.Return(run)
	return _c
}

// GetSyncSummary provides a mock function with no fields
func (_m *MockSyncRepository) GetSyncSummary() (*models.SyncSummary, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSyncSummary")
	}

	var r0 *models.SyncSummary
	var r1 error
	if rf, ok := ret.Get(0).(func() (*models.SyncSummary, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *models.SyncSummary); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SyncSummary)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSyncRepository_GetSyncSummary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSyncSummary'
type MockSyncRepository_GetSyncSummary_Call struct {
	*mock.Call
}

// GetSyncSummary is a helper method to define mock.On call
func (_e *MockSyncRepository_Expecter) GetSyncSummary() *MockSyncRepository_GetSyncSummary_Call {
	return &MockSyncRepository_GetSyncSummary_Call{Call: _e.mock.On("GetSyncSummary")}
}

func (_c *MockSyncRepository_GetSyncSummary_Call) Run(run func()) *MockSyncRepository_GetSyncSummary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSyncRepository_GetSyncSummary_Call) Return(_a0 *models.SyncSummary, _a1 error) *MockSyncRepository_GetSyncSummary_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSyncRepository_GetSyncSummary_Call) RunAndReturn(run func() (*models.SyncSummary, error)) *MockSyncRepository_GetSyncSummary_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSyncJob provides a mock function with given fields: syncJob
func (_m *MockSyncRepository) UpdateSyncJob(syncJob *models.SyncJob) error {
	ret := _m.Called(syncJob)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSyncJob")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.SyncJob) error); ok {
		r0 = rf(syncJob)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSyncRepository_UpdateSyncJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSyncJob'
type MockSyncRepository_UpdateSyncJob_Call struct {
	*mock.Call
}

// UpdateSyncJob is a helper method to define mock.On call
//   - syncJob *models.SyncJob
func (_e *MockSyncRepository_Expecter) UpdateSyncJob(syncJob interface{}) *MockSyncRepository_UpdateSyncJob_Call {
	return &MockSyncRepository_UpdateSyncJob_Call{Call: _e.mock.On("UpdateSyncJob", syncJob)}
}

func (_c *MockSyncRepository_UpdateSyncJob_Call) Run(run func(syncJob *models.SyncJob)) *MockSyncRepository_UpdateSyncJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.SyncJob))
	})
	return _c
}

func (_c *MockSyncRepository_UpdateSyncJob_Call) Return(_a0 error) *MockSyncRepository_UpdateSyncJob_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSyncRepository_UpdateSyncJob_Call) RunAndReturn(run func(*models.SyncJob) error) *MockSyncRepository_UpdateSyncJob_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSyncRepository creates a new instance of MockSyncRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSyncRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSyncRepository {
	mock := &MockSyncRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
