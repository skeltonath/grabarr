// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	interfaces "grabarr/internal/interfaces"

	mock "github.com/stretchr/testify/mock"
)

// MockResourceChecker is an autogenerated mock type for the ResourceChecker type
type MockResourceChecker struct {
	mock.Mock
}

type MockResourceChecker_Expecter struct {
	mock *mock.Mock
}

func (_m *MockResourceChecker) EXPECT() *MockResourceChecker_Expecter {
	return &MockResourceChecker_Expecter{mock: &_m.Mock}
}

// CanScheduleJob provides a mock function with no fields
func (_m *MockResourceChecker) CanScheduleJob() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CanScheduleJob")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockResourceChecker_CanScheduleJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CanScheduleJob'
type MockResourceChecker_CanScheduleJob_Call struct {
	*mock.Call
}

// CanScheduleJob is a helper method to define mock.On call
func (_e *MockResourceChecker_Expecter) CanScheduleJob() *MockResourceChecker_CanScheduleJob_Call {
	return &MockResourceChecker_CanScheduleJob_Call{Call: _e.mock.On("CanScheduleJob")}
}

func (_c *MockResourceChecker_CanScheduleJob_Call) Run(run func()) *MockResourceChecker_CanScheduleJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockResourceChecker_CanScheduleJob_Call) Return(_a0 bool) *MockResourceChecker_CanScheduleJob_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockResourceChecker_CanScheduleJob_Call) RunAndReturn(run func() bool) *MockResourceChecker_CanScheduleJob_Call {
	_c.Call.Return(run)
	return _c
}

// GetResourceStatus provides a mock function with no fields
func (_m *MockResourceChecker) GetResourceStatus() interfaces.ResourceStatus {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetResourceStatus")
	}

	var r0 interfaces.ResourceStatus
	if rf, ok := ret.Get(0).(func() interfaces.ResourceStatus); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(interfaces.ResourceStatus)
	}

	return r0
}

// MockResourceChecker_GetResourceStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResourceStatus'
type MockResourceChecker_GetResourceStatus_Call struct {
	*mock.Call
}

// GetResourceStatus is a helper method to define mock.On call
func (_e *MockResourceChecker_Expecter) GetResourceStatus() *MockResourceChecker_GetResourceStatus_Call {
	return &MockResourceChecker_GetResourceStatus_Call{Call: _e.mock.On("GetResourceStatus")}
}

func (_c *MockResourceChecker_GetResourceStatus_Call) Run(run func()) *MockResourceChecker_GetResourceStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockResourceChecker_GetResourceStatus_Call) Return(_a0 interfaces.ResourceStatus) *MockResourceChecker_GetResourceStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockResourceChecker_GetResourceStatus_Call) RunAndReturn(run func() interfaces.ResourceStatus) *MockResourceChecker_GetResourceStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockResourceChecker creates a new instance of MockResourceChecker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockResourceChecker(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockResourceChecker {
	mock := &MockResourceChecker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
