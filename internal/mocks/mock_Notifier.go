// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	models "grabarr/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// MockNotifier is an autogenerated mock type for the Notifier type
type MockNotifier struct {
	mock.Mock
}

type MockNotifier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNotifier) EXPECT() *MockNotifier_Expecter {
	return &MockNotifier_Expecter{mock: &_m.Mock}
}

// IsEnabled provides a mock function with no fields
func (_m *MockNotifier) IsEnabled() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsEnabled")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockNotifier_IsEnabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsEnabled'
type MockNotifier_IsEnabled_Call struct {
	*mock.Call
}

// IsEnabled is a helper method to define mock.On call
func (_e *MockNotifier_Expecter) IsEnabled() *MockNotifier_IsEnabled_Call {
	return &MockNotifier_IsEnabled_Call{Call: _e.mock.On("IsEnabled")}
}

func (_c *MockNotifier_IsEnabled_Call) Run(run func()) *MockNotifier_IsEnabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNotifier_IsEnabled_Call) Return(_a0 bool) *MockNotifier_IsEnabled_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotifier_IsEnabled_Call) RunAndReturn(run func() bool) *MockNotifier_IsEnabled_Call {
	_c.Call.Return(run)
	return _c
}

// NotifyJobCompleted provides a mock function with given fields: job
func (_m *MockNotifier) NotifyJobCompleted(job *models.Job) error {
	ret := _m.Called(job)

	if len(ret) == 0 {
		panic("no return value specified for NotifyJobCompleted")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Job) error); ok {
		r0 = rf(job)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotifier_NotifyJobCompleted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyJobCompleted'
type MockNotifier_NotifyJobCompleted_Call struct {
	*mock.Call
}

// NotifyJobCompleted is a helper method to define mock.On call
//   - job *models.Job
func (_e *MockNotifier_Expecter) NotifyJobCompleted(job interface{}) *MockNotifier_NotifyJobCompleted_Call {
	return &MockNotifier_NotifyJobCompleted_Call{Call: _e.mock.On("NotifyJobCompleted", job)}
}

func (_c *MockNotifier_NotifyJobCompleted_Call) Run(run func(job *models.Job)) *MockNotifier_NotifyJobCompleted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Job))
	})
	return _c
}

func (_c *MockNotifier_NotifyJobCompleted_Call) Return(_a0 error) *MockNotifier_NotifyJobCompleted_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotifier_NotifyJobCompleted_Call) RunAndReturn(run func(*models.Job) error) *MockNotifier_NotifyJobCompleted_Call {
	_c.Call.Return(run)
	return _c
}

// NotifyJobFailed provides a mock function with given fields: job
func (_m *MockNotifier) NotifyJobFailed(job *models.Job) error {
	ret := _m.Called(job)

	if len(ret) == 0 {
		panic("no return value specified for NotifyJobFailed")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Job) error); ok {
		r0 = rf(job)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotifier_NotifyJobFailed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyJobFailed'
type MockNotifier_NotifyJobFailed_Call struct {
	*mock.Call
}

// NotifyJobFailed is a helper method to define mock.On call
//   - job *models.Job
func (_e *MockNotifier_Expecter) NotifyJobFailed(job interface{}) *MockNotifier_NotifyJobFailed_Call {
	return &MockNotifier_NotifyJobFailed_Call{Call: _e.mock.On("NotifyJobFailed", job)}
}

func (_c *MockNotifier_NotifyJobFailed_Call) Run(run func(job *models.Job)) *MockNotifier_NotifyJobFailed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Job))
	})
	return _c
}

func (_c *MockNotifier_NotifyJobFailed_Call) Return(_a0 error) *MockNotifier_NotifyJobFailed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotifier_NotifyJobFailed_Call) RunAndReturn(run func(*models.Job) error) *MockNotifier_NotifyJobFailed_Call {
	_c.Call.Return(run)
	return _c
}

// NotifySyncCompleted provides a mock function with given fields: syncJob
func (_m *MockNotifier) NotifySyncCompleted(syncJob *models.SyncJob) error {
	ret := _m.Called(syncJob)

	if len(ret) == 0 {
		panic("no return value specified for NotifySyncCompleted")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.SyncJob) error); ok {
		r0 = rf(syncJob)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotifier_NotifySyncCompleted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifySyncCompleted'
type MockNotifier_NotifySyncCompleted_Call struct {
	*mock.Call
}

// NotifySyncCompleted is a helper method to define mock.On call
//   - syncJob *models.SyncJob
func (_e *MockNotifier_Expecter) NotifySyncCompleted(syncJob interface{}) *MockNotifier_NotifySyncCompleted_Call {
	return &MockNotifier_NotifySyncCompleted_Call{Call: _e.mock.On("NotifySyncCompleted", syncJob)}
}

func (_c *MockNotifier_NotifySyncCompleted_Call) Run(run func(syncJob *models.SyncJob)) *MockNotifier_NotifySyncCompleted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.SyncJob))
	})
	return _c
}

func (_c *MockNotifier_NotifySyncCompleted_Call) Return(_a0 error) *MockNotifier_NotifySyncCompleted_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotifier_NotifySyncCompleted_Call) RunAndReturn(run func(*models.SyncJob) error) *MockNotifier_NotifySyncCompleted_Call {
	_c.Call.Return(run)
	return _c
}

// NotifySyncFailed provides a mock function with given fields: syncJob
func (_m *MockNotifier) NotifySyncFailed(syncJob *models.SyncJob) error {
	ret := _m.Called(syncJob)

	if len(ret) == 0 {
		panic("no return value specified for NotifySyncFailed")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.SyncJob) error); ok {
		r0 = rf(syncJob)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotifier_NotifySyncFailed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifySyncFailed'
type MockNotifier_NotifySyncFailed_Call struct {
	*mock.Call
}

// NotifySyncFailed is a helper method to define mock.On call
//   - syncJob *models.SyncJob
func (_e *MockNotifier_Expecter) NotifySyncFailed(syncJob interface{}) *MockNotifier_NotifySyncFailed_Call {
	return &MockNotifier_NotifySyncFailed_Call{Call: _e.mock.On("NotifySyncFailed", syncJob)}
}

func (_c *MockNotifier_NotifySyncFailed_Call) Run(run func(syncJob *models.SyncJob)) *MockNotifier_NotifySyncFailed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.SyncJob))
	})
	return _c
}

func (_c *MockNotifier_NotifySyncFailed_Call) Return(_a0 error) *MockNotifier_NotifySyncFailed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotifier_NotifySyncFailed_Call) RunAndReturn(run func(*models.SyncJob) error) *MockNotifier_NotifySyncFailed_Call {
	_c.Call.Return(run)
	return _c
}

// NotifySystemAlert provides a mock function with given fields: title, message, priority
func (_m *MockNotifier) NotifySystemAlert(title string, message string, priority int) error {
	ret := _m.Called(title, message, priority)

	if len(ret) == 0 {
		panic("no return value specified for NotifySystemAlert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, int) error); ok {
		r0 = rf(title, message, priority)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotifier_NotifySystemAlert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifySystemAlert'
type MockNotifier_NotifySystemAlert_Call struct {
	*mock.Call
}

// NotifySystemAlert is a helper method to define mock.On call
//   - title string
//   - message string
//   - priority int
func (_e *MockNotifier_Expecter) NotifySystemAlert(title interface{}, message interface{}, priority interface{}) *MockNotifier_NotifySystemAlert_Call {
	return &MockNotifier_NotifySystemAlert_Call{Call: _e.mock.On("NotifySystemAlert", title, message, priority)}
}

func (_c *MockNotifier_NotifySystemAlert_Call) Run(run func(title string, message string, priority int)) *MockNotifier_NotifySystemAlert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *MockNotifier_NotifySystemAlert_Call) Return(_a0 error) *MockNotifier_NotifySystemAlert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotifier_NotifySystemAlert_Call) RunAndReturn(run func(string, string, int) error) *MockNotifier_NotifySystemAlert_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNotifier creates a new instance of MockNotifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNotifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNotifier {
	mock := &MockNotifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
