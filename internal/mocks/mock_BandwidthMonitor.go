// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockBandwidthMonitor is an autogenerated mock type for the BandwidthMonitor type
type MockBandwidthMonitor struct {
	mock.Mock
}

type MockBandwidthMonitor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBandwidthMonitor) EXPECT() *MockBandwidthMonitor_Expecter {
	return &MockBandwidthMonitor_Expecter{mock: &_m.Mock}
}

// GetCurrentUsage provides a mock function with no fields
func (_m *MockBandwidthMonitor) GetCurrentUsage() (float64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentUsage")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func() (float64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBandwidthMonitor_GetCurrentUsage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentUsage'
type MockBandwidthMonitor_GetCurrentUsage_Call struct {
	*mock.Call
}

// GetCurrentUsage is a helper method to define mock.On call
func (_e *MockBandwidthMonitor_Expecter) GetCurrentUsage() *MockBandwidthMonitor_GetCurrentUsage_Call {
	return &MockBandwidthMonitor_GetCurrentUsage_Call{Call: _e.mock.On("GetCurrentUsage")}
}

func (_c *MockBandwidthMonitor_GetCurrentUsage_Call) Run(run func()) *MockBandwidthMonitor_GetCurrentUsage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBandwidthMonitor_GetCurrentUsage_Call) Return(_a0 float64, _a1 error) *MockBandwidthMonitor_GetCurrentUsage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBandwidthMonitor_GetCurrentUsage_Call) RunAndReturn(run func() (float64, error)) *MockBandwidthMonitor_GetCurrentUsage_Call {
	_c.Call.Return(run)
	return _c
}

// IsAvailable provides a mock function with no fields
func (_m *MockBandwidthMonitor) IsAvailable() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsAvailable")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockBandwidthMonitor_IsAvailable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsAvailable'
type MockBandwidthMonitor_IsAvailable_Call struct {
	*mock.Call
}

// IsAvailable is a helper method to define mock.On call
func (_e *MockBandwidthMonitor_Expecter) IsAvailable() *MockBandwidthMonitor_IsAvailable_Call {
	return &MockBandwidthMonitor_IsAvailable_Call{Call: _e.mock.On("IsAvailable")}
}

func (_c *MockBandwidthMonitor_IsAvailable_Call) Run(run func()) *MockBandwidthMonitor_IsAvailable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBandwidthMonitor_IsAvailable_Call) Return(_a0 bool) *MockBandwidthMonitor_IsAvailable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBandwidthMonitor_IsAvailable_Call) RunAndReturn(run func() bool) *MockBandwidthMonitor_IsAvailable_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBandwidthMonitor creates a new instance of MockBandwidthMonitor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBandwidthMonitor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBandwidthMonitor {
	mock := &MockBandwidthMonitor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
