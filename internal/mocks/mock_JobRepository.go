// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	models "grabarr/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// MockJobRepository is an autogenerated mock type for the JobRepository type
type MockJobRepository struct {
	mock.Mock
}

type MockJobRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJobRepository) EXPECT() *MockJobRepository_Expecter {
	return &MockJobRepository_Expecter{mock: &_m.Mock}
}

// GetJob provides a mock function with given fields: id
func (_m *MockJobRepository) GetJob(id int64) (*models.Job, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetJob")
	}

	var r0 *models.Job
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*models.Job, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) *models.Job); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Job)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobRepository_GetJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJob'
type MockJobRepository_GetJob_Call struct {
	*mock.Call
}

// GetJob is a helper method to define mock.On call
//   - id int64
func (_e *MockJobRepository_Expecter) GetJob(id interface{}) *MockJobRepository_GetJob_Call {
	return &MockJobRepository_GetJob_Call{Call: _e.mock.On("GetJob", id)}
}

func (_c *MockJobRepository_GetJob_Call) Run(run func(id int64)) *MockJobRepository_GetJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockJobRepository_GetJob_Call) Return(_a0 *models.Job, _a1 error) *MockJobRepository_GetJob_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobRepository_GetJob_Call) RunAndReturn(run func(int64) (*models.Job, error)) *MockJobRepository_GetJob_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateJob provides a mock function with given fields: job
func (_m *MockJobRepository) UpdateJob(job *models.Job) error {
	ret := _m.Called(job)

	if len(ret) == 0 {
		panic("no return value specified for UpdateJob")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Job) error); ok {
		r0 = rf(job)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockJobRepository_UpdateJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateJob'
type MockJobRepository_UpdateJob_Call struct {
	*mock.Call
}

// UpdateJob is a helper method to define mock.On call
//   - job *models.Job
func (_e *MockJobRepository_Expecter) UpdateJob(job interface{}) *MockJobRepository_UpdateJob_Call {
	return &MockJobRepository_UpdateJob_Call{Call: _e.mock.On("UpdateJob", job)}
}

func (_c *MockJobRepository_UpdateJob_Call) Run(run func(job *models.Job)) *MockJobRepository_UpdateJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Job))
	})
	return _c
}

func (_c *MockJobRepository_UpdateJob_Call) Return(_a0 error) *MockJobRepository_UpdateJob_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJobRepository_UpdateJob_Call) RunAndReturn(run func(*models.Job) error) *MockJobRepository_UpdateJob_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockJobRepository creates a new instance of MockJobRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJobRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJobRepository {
	mock := &MockJobRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
