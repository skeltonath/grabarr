// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	interfaces "grabarr/internal/interfaces"

	mock "github.com/stretchr/testify/mock"
)

// MockGatekeeper is an autogenerated mock type for the Gatekeeper type
type MockGatekeeper struct {
	mock.Mock
}

type MockGatekeeper_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGatekeeper) EXPECT() *MockGatekeeper_Expecter {
	return &MockGatekeeper_Expecter{mock: &_m.Mock}
}

// CanStartJob provides a mock function with given fields: fileSize
func (_m *MockGatekeeper) CanStartJob(fileSize int64) interfaces.GateDecision {
	ret := _m.Called(fileSize)

	if len(ret) == 0 {
		panic("no return value specified for CanStartJob")
	}

	var r0 interfaces.GateDecision
	if rf, ok := ret.Get(0).(func(int64) interfaces.GateDecision); ok {
		r0 = rf(fileSize)
	} else {
		r0 = ret.Get(0).(interfaces.GateDecision)
	}

	return r0
}

// MockGatekeeper_CanStartJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CanStartJob'
type MockGatekeeper_CanStartJob_Call struct {
	*mock.Call
}

// CanStartJob is a helper method to define mock.On call
//   - fileSize int64
func (_e *MockGatekeeper_Expecter) CanStartJob(fileSize interface{}) *MockGatekeeper_CanStartJob_Call {
	return &MockGatekeeper_CanStartJob_Call{Call: _e.mock.On("CanStartJob", fileSize)}
}

func (_c *MockGatekeeper_CanStartJob_Call) Run(run func(fileSize int64)) *MockGatekeeper_CanStartJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockGatekeeper_CanStartJob_Call) Return(_a0 interfaces.GateDecision) *MockGatekeeper_CanStartJob_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGatekeeper_CanStartJob_Call) RunAndReturn(run func(int64) interfaces.GateDecision) *MockGatekeeper_CanStartJob_Call {
	_c.Call.Return(run)
	return _c
}

// CanStartSync provides a mock function with no fields
func (_m *MockGatekeeper) CanStartSync() interfaces.GateDecision {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CanStartSync")
	}

	var r0 interfaces.GateDecision
	if rf, ok := ret.Get(0).(func() interfaces.GateDecision); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(interfaces.GateDecision)
	}

	return r0
}

// MockGatekeeper_CanStartSync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CanStartSync'
type MockGatekeeper_CanStartSync_Call struct {
	*mock.Call
}

// CanStartSync is a helper method to define mock.On call
func (_e *MockGatekeeper_Expecter) CanStartSync() *MockGatekeeper_CanStartSync_Call {
	return &MockGatekeeper_CanStartSync_Call{Call: _e.mock.On("CanStartSync")}
}

func (_c *MockGatekeeper_CanStartSync_Call) Run(run func()) *MockGatekeeper_CanStartSync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGatekeeper_CanStartSync_Call) Return(_a0 interfaces.GateDecision) *MockGatekeeper_CanStartSync_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGatekeeper_CanStartSync_Call) RunAndReturn(run func() interfaces.GateDecision) *MockGatekeeper_CanStartSync_Call {
	_c.Call.Return(run)
	return _c
}

// GetResourceStatus provides a mock function with no fields
func (_m *MockGatekeeper) GetResourceStatus() interfaces.GatekeeperResourceStatus {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetResourceStatus")
	}

	var r0 interfaces.GatekeeperResourceStatus
	if rf, ok := ret.Get(0).(func() interfaces.GatekeeperResourceStatus); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(interfaces.GatekeeperResourceStatus)
	}

	return r0
}

// MockGatekeeper_GetResourceStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResourceStatus'
type MockGatekeeper_GetResourceStatus_Call struct {
	*mock.Call
}

// GetResourceStatus is a helper method to define mock.On call
func (_e *MockGatekeeper_Expecter) GetResourceStatus() *MockGatekeeper_GetResourceStatus_Call {
	return &MockGatekeeper_GetResourceStatus_Call{Call: _e.mock.On("GetResourceStatus")}
}

func (_c *MockGatekeeper_GetResourceStatus_Call) Run(run func()) *MockGatekeeper_GetResourceStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGatekeeper_GetResourceStatus_Call) Return(_a0 interfaces.GatekeeperResourceStatus) *MockGatekeeper_GetResourceStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGatekeeper_GetResourceStatus_Call) RunAndReturn(run func() interfaces.GatekeeperResourceStatus) *MockGatekeeper_GetResourceStatus_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with no fields
func (_m *MockGatekeeper) Start() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGatekeeper_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockGatekeeper_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *MockGatekeeper_Expecter) Start() *MockGatekeeper_Start_Call {
	return &MockGatekeeper_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *MockGatekeeper_Start_Call) Run(run func()) *MockGatekeeper_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGatekeeper_Start_Call) Return(_a0 error) *MockGatekeeper_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGatekeeper_Start_Call) RunAndReturn(run func() error) *MockGatekeeper_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with no fields
func (_m *MockGatekeeper) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGatekeeper_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockGatekeeper_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockGatekeeper_Expecter) Stop() *MockGatekeeper_Stop_Call {
	return &MockGatekeeper_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockGatekeeper_Stop_Call) Run(run func()) *MockGatekeeper_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGatekeeper_Stop_Call) Return(_a0 error) *MockGatekeeper_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGatekeeper_Stop_Call) RunAndReturn(run func() error) *MockGatekeeper_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGatekeeper creates a new instance of MockGatekeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGatekeeper(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGatekeeper {
	mock := &MockGatekeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
