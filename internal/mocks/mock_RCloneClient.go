// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "grabarr/internal/models"

	rclone "grabarr/internal/rclone"
)

// MockRCloneClient is an autogenerated mock type for the RCloneClient type
type MockRCloneClient struct {
	mock.Mock
}

type MockRCloneClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRCloneClient) EXPECT() *MockRCloneClient_Expecter {
	return &MockRCloneClient_Expecter{mock: &_m.Mock}
}

// Copy provides a mock function with given fields: ctx, srcFs, dstFs, filter
func (_m *MockRCloneClient) Copy(ctx context.Context, srcFs string, dstFs string, filter map[string]interface{}) (*models.RCloneCopyResponse, error) {
	ret := _m.Called(ctx, srcFs, dstFs, filter)

	if len(ret) == 0 {
		panic("no return value specified for Copy")
	}

	var r0 *models.RCloneCopyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, map[string]interface{}) (*models.RCloneCopyResponse, error)); ok {
		return rf(ctx, srcFs, dstFs, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, map[string]interface{}) *models.RCloneCopyResponse); ok {
		r0 = rf(ctx, srcFs, dstFs, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.RCloneCopyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, map[string]interface{}) error); ok {
		r1 = rf(ctx, srcFs, dstFs, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRCloneClient_Copy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Copy'
type MockRCloneClient_Copy_Call struct {
	*mock.Call
}

// Copy is a helper method to define mock.On call
//   - ctx context.Context
//   - srcFs string
//   - dstFs string
//   - filter map[string]interface{}
func (_e *MockRCloneClient_Expecter) Copy(ctx interface{}, srcFs interface{}, dstFs interface{}, filter interface{}) *MockRCloneClient_Copy_Call {
	return &MockRCloneClient_Copy_Call{Call: _e.mock.On("Copy", ctx, srcFs, dstFs, filter)}
}

func (_c *MockRCloneClient_Copy_Call) Run(run func(ctx context.Context, srcFs string, dstFs string, filter map[string]interface{})) *MockRCloneClient_Copy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(map[string]interface{}))
	})
	return _c
}

func (_c *MockRCloneClient_Copy_Call) Return(_a0 *models.RCloneCopyResponse, _a1 error) *MockRCloneClient_Copy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRCloneClient_Copy_Call) RunAndReturn(run func(context.Context, string, string, map[string]interface{}) (*models.RCloneCopyResponse, error)) *MockRCloneClient_Copy_Call {
	_c.Call.Return(run)
	return _c
}

// CopyWithIgnoreExisting provides a mock function with given fields: ctx, srcFs, dstFs, filter
func (_m *MockRCloneClient) CopyWithIgnoreExisting(ctx context.Context, srcFs string, dstFs string, filter map[string]interface{}) (*models.RCloneCopyResponse, error) {
	ret := _m.Called(ctx, srcFs, dstFs, filter)

	if len(ret) == 0 {
		panic("no return value specified for CopyWithIgnoreExisting")
	}

	var r0 *models.RCloneCopyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, map[string]interface{}) (*models.RCloneCopyResponse, error)); ok {
		return rf(ctx, srcFs, dstFs, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, map[string]interface{}) *models.RCloneCopyResponse); ok {
		r0 = rf(ctx, srcFs, dstFs, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.RCloneCopyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, map[string]interface{}) error); ok {
		r1 = rf(ctx, srcFs, dstFs, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRCloneClient_CopyWithIgnoreExisting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CopyWithIgnoreExisting'
type MockRCloneClient_CopyWithIgnoreExisting_Call struct {
	*mock.Call
}

// CopyWithIgnoreExisting is a helper method to define mock.On call
//   - ctx context.Context
//   - srcFs string
//   - dstFs string
//   - filter map[string]interface{}
func (_e *MockRCloneClient_Expecter) CopyWithIgnoreExisting(ctx interface{}, srcFs interface{}, dstFs interface{}, filter interface{}) *MockRCloneClient_CopyWithIgnoreExisting_Call {
	return &MockRCloneClient_CopyWithIgnoreExisting_Call{Call: _e.mock.On("CopyWithIgnoreExisting", ctx, srcFs, dstFs, filter)}
}

func (_c *MockRCloneClient_CopyWithIgnoreExisting_Call) Run(run func(ctx context.Context, srcFs string, dstFs string, filter map[string]interface{})) *MockRCloneClient_CopyWithIgnoreExisting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(map[string]interface{}))
	})
	return _c
}

func (_c *MockRCloneClient_CopyWithIgnoreExisting_Call) Return(_a0 *models.RCloneCopyResponse, _a1 error) *MockRCloneClient_CopyWithIgnoreExisting_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRCloneClient_CopyWithIgnoreExisting_Call) RunAndReturn(run func(context.Context, string, string, map[string]interface{}) (*models.RCloneCopyResponse, error)) *MockRCloneClient_CopyWithIgnoreExisting_Call {
	_c.Call.Return(run)
	return _c
}

// GetCoreStats provides a mock function with given fields: ctx
func (_m *MockRCloneClient) GetCoreStats(ctx context.Context) (*rclone.CoreStats, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCoreStats")
	}

	var r0 *rclone.CoreStats
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*rclone.CoreStats, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *rclone.CoreStats); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rclone.CoreStats)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRCloneClient_GetCoreStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCoreStats'
type MockRCloneClient_GetCoreStats_Call struct {
	*mock.Call
}

// GetCoreStats is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRCloneClient_Expecter) GetCoreStats(ctx interface{}) *MockRCloneClient_GetCoreStats_Call {
	return &MockRCloneClient_GetCoreStats_Call{Call: _e.mock.On("GetCoreStats", ctx)}
}

func (_c *MockRCloneClient_GetCoreStats_Call) Run(run func(ctx context.Context)) *MockRCloneClient_GetCoreStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockRCloneClient_GetCoreStats_Call) Return(_a0 *rclone.CoreStats, _a1 error) *MockRCloneClient_GetCoreStats_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRCloneClient_GetCoreStats_Call) RunAndReturn(run func(context.Context) (*rclone.CoreStats, error)) *MockRCloneClient_GetCoreStats_Call {
	_c.Call.Return(run)
	return _c
}

// GetJobStatus provides a mock function with given fields: ctx, jobID
func (_m *MockRCloneClient) GetJobStatus(ctx context.Context, jobID int64) (*models.RCloneJobStatus, error) {
	ret := _m.Called(ctx, jobID)

	if len(ret) == 0 {
		panic("no return value specified for GetJobStatus")
	}

	var r0 *models.RCloneJobStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*models.RCloneJobStatus, error)); ok {
		return rf(ctx, jobID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *models.RCloneJobStatus); ok {
		r0 = rf(ctx, jobID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.RCloneJobStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, jobID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRCloneClient_GetJobStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJobStatus'
type MockRCloneClient_GetJobStatus_Call struct {
	*mock.Call
}

// GetJobStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - jobID int64
func (_e *MockRCloneClient_Expecter) GetJobStatus(ctx interface{}, jobID interface{}) *MockRCloneClient_GetJobStatus_Call {
	return &MockRCloneClient_GetJobStatus_Call{Call: _e.mock.On("GetJobStatus", ctx, jobID)}
}

func (_c *MockRCloneClient_GetJobStatus_Call) Run(run func(ctx context.Context, jobID int64)) *MockRCloneClient_GetJobStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockRCloneClient_GetJobStatus_Call) Return(_a0 *models.RCloneJobStatus, _a1 error) *MockRCloneClient_GetJobStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRCloneClient_GetJobStatus_Call) RunAndReturn(run func(context.Context, int64) (*models.RCloneJobStatus, error)) *MockRCloneClient_GetJobStatus_Call {
	_c.Call.Return(run)
	return _c
}

// ListJobs provides a mock function with given fields: ctx
func (_m *MockRCloneClient) ListJobs(ctx context.Context) (*models.RCloneJobListResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListJobs")
	}

	var r0 *models.RCloneJobListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*models.RCloneJobListResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *models.RCloneJobListResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.RCloneJobListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRCloneClient_ListJobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListJobs'
type MockRCloneClient_ListJobs_Call struct {
	*mock.Call
}

// ListJobs is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRCloneClient_Expecter) ListJobs(ctx interface{}) *MockRCloneClient_ListJobs_Call {
	return &MockRCloneClient_ListJobs_Call{Call: _e.mock.On("ListJobs", ctx)}
}

func (_c *MockRCloneClient_ListJobs_Call) Run(run func(ctx context.Context)) *MockRCloneClient_ListJobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockRCloneClient_ListJobs_Call) Return(_a0 *models.RCloneJobListResponse, _a1 error) *MockRCloneClient_ListJobs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRCloneClient_ListJobs_Call) RunAndReturn(run func(context.Context) (*models.RCloneJobListResponse, error)) *MockRCloneClient_ListJobs_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function with given fields: ctx
func (_m *MockRCloneClient) Ping(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRCloneClient_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type MockRCloneClient_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRCloneClient_Expecter) Ping(ctx interface{}) *MockRCloneClient_Ping_Call {
	return &MockRCloneClient_Ping_Call{Call: _e.mock.On("Ping", ctx)}
}

func (_c *MockRCloneClient_Ping_Call) Run(run func(ctx context.Context)) *MockRCloneClient_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockRCloneClient_Ping_Call) Return(_a0 error) *MockRCloneClient_Ping_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRCloneClient_Ping_Call) RunAndReturn(run func(context.Context) error) *MockRCloneClient_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// StopJob provides a mock function with given fields: ctx, jobID
func (_m *MockRCloneClient) StopJob(ctx context.Context, jobID int64) error {
	ret := _m.Called(ctx, jobID)

	if len(ret) == 0 {
		panic("no return value specified for StopJob")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, jobID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRCloneClient_StopJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopJob'
type MockRCloneClient_StopJob_Call struct {
	*mock.Call
}

// StopJob is a helper method to define mock.On call
//   - ctx context.Context
//   - jobID int64
func (_e *MockRCloneClient_Expecter) StopJob(ctx interface{}, jobID interface{}) *MockRCloneClient_StopJob_Call {
	return &MockRCloneClient_StopJob_Call{Call: _e.mock.On("StopJob", ctx, jobID)}
}

func (_c *MockRCloneClient_StopJob_Call) Run(run func(ctx context.Context, jobID int64)) *MockRCloneClient_StopJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockRCloneClient_StopJob_Call) Return(_a0 error) *MockRCloneClient_StopJob_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRCloneClient_StopJob_Call) RunAndReturn(run func(context.Context, int64) error) *MockRCloneClient_StopJob_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRCloneClient creates a new instance of MockRCloneClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRCloneClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRCloneClient {
	mock := &MockRCloneClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
