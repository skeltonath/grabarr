// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "grabarr/internal/models"
)

// MockJobExecutor is an autogenerated mock type for the JobExecutor type
type MockJobExecutor struct {
	mock.Mock
}

type MockJobExecutor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJobExecutor) EXPECT() *MockJobExecutor_Expecter {
	return &MockJobExecutor_Expecter{mock: &_m.Mock}
}

// CanExecute provides a mock function with no fields
func (_m *MockJobExecutor) CanExecute() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CanExecute")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockJobExecutor_CanExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CanExecute'
type MockJobExecutor_CanExecute_Call struct {
	*mock.Call
}

// CanExecute is a helper method to define mock.On call
func (_e *MockJobExecutor_Expecter) CanExecute() *MockJobExecutor_CanExecute_Call {
	return &MockJobExecutor_CanExecute_Call{Call: _e.mock.On("CanExecute")}
}

func (_c *MockJobExecutor_CanExecute_Call) Run(run func()) *MockJobExecutor_CanExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockJobExecutor_CanExecute_Call) Return(_a0 bool) *MockJobExecutor_CanExecute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJobExecutor_CanExecute_Call) RunAndReturn(run func() bool) *MockJobExecutor_CanExecute_Call {
	_c.Call.Return(run)
	return _c
}

// Execute provides a mock function with given fields: ctx, job
func (_m *MockJobExecutor) Execute(ctx context.Context, job *models.Job) error {
	ret := _m.Called(ctx, job)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Job) error); ok {
		r0 = rf(ctx, job)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockJobExecutor_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockJobExecutor_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - job *models.Job
func (_e *MockJobExecutor_Expecter) Execute(ctx interface{}, job interface{}) *MockJobExecutor_Execute_Call {
	return &MockJobExecutor_Execute_Call{Call: _e.mock.On("Execute", ctx, job)}
}

func (_c *MockJobExecutor_Execute_Call) Run(run func(ctx context.Context, job *models.Job)) *MockJobExecutor_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Job))
	})
	return _c
}

func (_c *MockJobExecutor_Execute_Call) Return(_a0 error) *MockJobExecutor_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJobExecutor_Execute_Call) RunAndReturn(run func(context.Context, *models.Job) error) *MockJobExecutor_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockJobExecutor creates a new instance of MockJobExecutor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJobExecutor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJobExecutor {
	mock := &MockJobExecutor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
