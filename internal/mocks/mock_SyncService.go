// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "grabarr/internal/models"
)

// MockSyncService is an autogenerated mock type for the SyncService type
type MockSyncService struct {
	mock.Mock
}

type MockSyncService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSyncService) EXPECT() *MockSyncService_Expecter {
	return &MockSyncService_Expecter{mock: &_m.Mock}
}

// CancelSync provides a mock function with given fields: ctx, id
func (_m *MockSyncService) CancelSync(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for CancelSync")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSyncService_CancelSync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelSync'
type MockSyncService_CancelSync_Call struct {
	*mock.Call
}

// CancelSync is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockSyncService_Expecter) CancelSync(ctx interface{}, id interface{}) *MockSyncService_CancelSync_Call {
	return &MockSyncService_CancelSync_Call{Call: _e.mock.On("CancelSync", ctx, id)}
}

func (_c *MockSyncService_CancelSync_Call) Run(run func(ctx context.Context, id int64)) *MockSyncService_CancelSync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockSyncService_CancelSync_Call) Return(_a0 error) *MockSyncService_CancelSync_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSyncService_CancelSync_Call) RunAndReturn(run func(context.Context, int64) error) *MockSyncService_CancelSync_Call {
	_c.Call.Return(run)
	return _c
}

// GetSyncJob provides a mock function with given fields: id
func (_m *MockSyncService) GetSyncJob(id int64) (*models.SyncJob, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetSyncJob")
	}

	var r0 *models.SyncJob
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*models.SyncJob, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) *models.SyncJob); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SyncJob)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSyncService_GetSyncJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSyncJob'
type MockSyncService_GetSyncJob_Call struct {
	*mock.Call
}

// GetSyncJob is a helper method to define mock.On call
//   - id int64
func (_e *MockSyncService_Expecter) GetSyncJob(id interface{}) *MockSyncService_GetSyncJob_Call {
	return &MockSyncService_GetSyncJob_Call{Call: _e.mock.On("GetSyncJob", id)}
}

func (_c *MockSyncService_GetSyncJob_Call) Run(run func(id int64)) *MockSyncService_GetSyncJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockSyncService_GetSyncJob_Call) Return(_a0 *models.SyncJob, _a1 error) *MockSyncService_GetSyncJob_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSyncService_GetSyncJob_Call) RunAndReturn(run func(int64) (*models.SyncJob, error)) *MockSyncService_GetSyncJob_Call {
	_c.Call.Return(run)
	return _c
}

// GetSyncJobs provides a mock function with given fields: filter
func (_m *MockSyncService) GetSyncJobs(filter models.SyncFilter) ([]*models.SyncJob, error) {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for GetSyncJobs")
	}

	var r0 []*models.SyncJob
	var r1 error
	if rf, ok := ret.Get(0).(func(models.SyncFilter) ([]*models.SyncJob, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(models.SyncFilter) []*models.SyncJob); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.SyncJob)
		}
	}

	if rf, ok := ret.Get(1).(func(models.SyncFilter) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSyncService_GetSyncJobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSyncJobs'
type MockSyncService_GetSyncJobs_Call struct {
	*mock.Call
}

// GetSyncJobs is a helper method to define mock.On call
//   - filter models.SyncFilter
func (_e *MockSyncService_Expecter) GetSyncJobs(filter interface{}) *MockSyncService_GetSyncJobs_Call {
	return &MockSyncService_GetSyncJobs_Call{Call: _e.mock.On("GetSyncJobs", filter)}
}

func (_c *MockSyncService_GetSyncJobs_Call) Run(run func(filter models.SyncFilter)) *MockSyncService_GetSyncJobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.SyncFilter))
	})
	return _c
}

func (_c *MockSyncService_GetSyncJobs_Call) Return(_a0 []*models.SyncJob, _a1 error) *MockSyncService_GetSyncJobs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSyncService_GetSyncJobs_Call) RunAndReturn(run func(models.SyncFilter) ([]*models.SyncJob, error)) *MockSyncService_GetSyncJobs_Call {
	_c.Call.Return(run)
	return _c
}

// GetSyncSummary provides a mock function with no fields
func (_m *MockSyncService) GetSyncSummary() (*models.SyncSummary, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSyncSummary")
	}

	var r0 *models.SyncSummary
	var r1 error
	if rf, ok := ret.Get(0).(func() (*models.SyncSummary, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *models.SyncSummary); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SyncSummary)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSyncService_GetSyncSummary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSyncSummary'
type MockSyncService_GetSyncSummary_Call struct {
	*mock.Call
}

// GetSyncSummary is a helper method to define mock.On call
func (_e *MockSyncService_Expecter) GetSyncSummary() *MockSyncService_GetSyncSummary_Call {
	return &MockSyncService_GetSyncSummary_Call{Call: _e.mock.On("GetSyncSummary")}
}

func (_c *MockSyncService_GetSyncSummary_Call) Run(run func()) *MockSyncService_GetSyncSummary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSyncService_GetSyncSummary_Call) Return(_a0 *models.SyncSummary, _a1 error) *MockSyncService_GetSyncSummary_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSyncService_GetSyncSummary_Call) RunAndReturn(run func() (*models.SyncSummary, error)) *MockSyncService_GetSyncSummary_Call {
	_c.Call.Return(run)
	return _c
}

// StartSync provides a mock function with given fields: ctx, remotePath
func (_m *MockSyncService) StartSync(ctx context.Context, remotePath string) (*models.SyncJob, error) {
	ret := _m.Called(ctx, remotePath)

	if len(ret) == 0 {
		panic("no return value specified for StartSync")
	}

	var r0 *models.SyncJob
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.SyncJob, error)); ok {
		return rf(ctx, remotePath)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.SyncJob); ok {
		r0 = rf(ctx, remotePath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SyncJob)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, remotePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSyncService_StartSync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartSync'
type MockSyncService_StartSync_Call struct {
	*mock.Call
}

// StartSync is a helper method to define mock.On call
//   - ctx context.Context
//   - remotePath string
func (_e *MockSyncService_Expecter) StartSync(ctx interface{}, remotePath interface{}) *MockSyncService_StartSync_Call {
	return &MockSyncService_StartSync_Call{Call: _e.mock.On("StartSync", ctx, remotePath)}
}

func (_c *MockSyncService_StartSync_Call) Run(run func(ctx context.Context, remotePath string)) *MockSyncService_StartSync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSyncService_StartSync_Call) Return(_a0 *models.SyncJob, _a1 error) *MockSyncService_StartSync_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSyncService_StartSync_Call) RunAndReturn(run func(context.Context, string) (*models.SyncJob, error)) *MockSyncService_StartSync_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSyncService creates a new instance of MockSyncService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSyncService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSyncService {
	mock := &MockSyncService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
