// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"
	interfaces "grabarr/internal/interfaces"

	mock "github.com/stretchr/testify/mock"

	models "grabarr/internal/models"
)

// MockJobQueue is an autogenerated mock type for the JobQueue type
type MockJobQueue struct {
	mock.Mock
}

type MockJobQueue_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJobQueue) EXPECT() *MockJobQueue_Expecter {
	return &MockJobQueue_Expecter{mock: &_m.Mock}
}

// CancelJob provides a mock function with given fields: id
func (_m *MockJobQueue) CancelJob(id int64) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for CancelJob")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockJobQueue_CancelJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelJob'
type MockJobQueue_CancelJob_Call struct {
	*mock.Call
}

// CancelJob is a helper method to define mock.On call
//   - id int64
func (_e *MockJobQueue_Expecter) CancelJob(id interface{}) *MockJobQueue_CancelJob_Call {
	return &MockJobQueue_CancelJob_Call{Call: _e.mock.On("CancelJob", id)}
}

func (_c *MockJobQueue_CancelJob_Call) Run(run func(id int64)) *MockJobQueue_CancelJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockJobQueue_CancelJob_Call) Return(_a0 error) *MockJobQueue_CancelJob_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJobQueue_CancelJob_Call) RunAndReturn(run func(int64) error) *MockJobQueue_CancelJob_Call {
	_c.Call.Return(run)
	return _c
}

// Enqueue provides a mock function with given fields: job
func (_m *MockJobQueue) Enqueue(job *models.Job) error {
	ret := _m.Called(job)

	if len(ret) == 0 {
		panic("no return value specified for Enqueue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Job) error); ok {
		r0 = rf(job)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockJobQueue_Enqueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enqueue'
type MockJobQueue_Enqueue_Call struct {
	*mock.Call
}

// Enqueue is a helper method to define mock.On call
//   - job *models.Job
func (_e *MockJobQueue_Expecter) Enqueue(job interface{}) *MockJobQueue_Enqueue_Call {
	return &MockJobQueue_Enqueue_Call{Call: _e.mock.On("Enqueue", job)}
}

func (_c *MockJobQueue_Enqueue_Call) Run(run func(job *models.Job)) *MockJobQueue_Enqueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Job))
	})
	return _c
}

func (_c *MockJobQueue_Enqueue_Call) Return(_a0 error) *MockJobQueue_Enqueue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJobQueue_Enqueue_Call) RunAndReturn(run func(*models.Job) error) *MockJobQueue_Enqueue_Call {
	_c.Call.Return(run)
	return _c
}

// GetJob provides a mock function with given fields: id
func (_m *MockJobQueue) GetJob(id int64) (*models.Job, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetJob")
	}

	var r0 *models.Job
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*models.Job, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) *models.Job); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Job)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobQueue_GetJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJob'
type MockJobQueue_GetJob_Call struct {
	*mock.Call
}

// GetJob is a helper method to define mock.On call
//   - id int64
func (_e *MockJobQueue_Expecter) GetJob(id interface{}) *MockJobQueue_GetJob_Call {
	return &MockJobQueue_GetJob_Call{Call: _e.mock.On("GetJob", id)}
}

func (_c *MockJobQueue_GetJob_Call) Run(run func(id int64)) *MockJobQueue_GetJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockJobQueue_GetJob_Call) Return(_a0 *models.Job, _a1 error) *MockJobQueue_GetJob_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobQueue_GetJob_Call) RunAndReturn(run func(int64) (*models.Job, error)) *MockJobQueue_GetJob_Call {
	_c.Call.Return(run)
	return _c
}

// GetJobs provides a mock function with given fields: filter
func (_m *MockJobQueue) GetJobs(filter models.JobFilter) ([]*models.Job, error) {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for GetJobs")
	}

	var r0 []*models.Job
	var r1 error
	if rf, ok := ret.Get(0).(func(models.JobFilter) ([]*models.Job, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(models.JobFilter) []*models.Job); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Job)
		}
	}

	if rf, ok := ret.Get(1).(func(models.JobFilter) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobQueue_GetJobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJobs'
type MockJobQueue_GetJobs_Call struct {
	*mock.Call
}

// GetJobs is a helper method to define mock.On call
//   - filter models.JobFilter
func (_e *MockJobQueue_Expecter) GetJobs(filter interface{}) *MockJobQueue_GetJobs_Call {
	return &MockJobQueue_GetJobs_Call{Call: _e.mock.On("GetJobs", filter)}
}

func (_c *MockJobQueue_GetJobs_Call) Run(run func(filter models.JobFilter)) *MockJobQueue_GetJobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.JobFilter))
	})
	return _c
}

func (_c *MockJobQueue_GetJobs_Call) Return(_a0 []*models.Job, _a1 error) *MockJobQueue_GetJobs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobQueue_GetJobs_Call) RunAndReturn(run func(models.JobFilter) ([]*models.Job, error)) *MockJobQueue_GetJobs_Call {
	_c.Call.Return(run)
	return _c
}

// GetSummary provides a mock function with no fields
func (_m *MockJobQueue) GetSummary() (*models.JobSummary, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSummary")
	}

	var r0 *models.JobSummary
	var r1 error
	if rf, ok := ret.Get(0).(func() (*models.JobSummary, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *models.JobSummary); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.JobSummary)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobQueue_GetSummary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSummary'
type MockJobQueue_GetSummary_Call struct {
	*mock.Call
}

// GetSummary is a helper method to define mock.On call
func (_e *MockJobQueue_Expecter) GetSummary() *MockJobQueue_GetSummary_Call {
	return &MockJobQueue_GetSummary_Call{Call: _e.mock.On("GetSummary")}
}

func (_c *MockJobQueue_GetSummary_Call) Run(run func()) *MockJobQueue_GetSummary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockJobQueue_GetSummary_Call) Return(_a0 *models.JobSummary, _a1 error) *MockJobQueue_GetSummary_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobQueue_GetSummary_Call) RunAndReturn(run func() (*models.JobSummary, error)) *MockJobQueue_GetSummary_Call {
	_c.Call.Return(run)
	return _c
}

// SetJobExecutor provides a mock function with given fields: executor
func (_m *MockJobQueue) SetJobExecutor(executor interfaces.JobExecutor) {
	_m.Called(executor)
}

// MockJobQueue_SetJobExecutor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetJobExecutor'
type MockJobQueue_SetJobExecutor_Call struct {
	*mock.Call
}

// SetJobExecutor is a helper method to define mock.On call
//   - executor interfaces.JobExecutor
func (_e *MockJobQueue_Expecter) SetJobExecutor(executor interface{}) *MockJobQueue_SetJobExecutor_Call {
	return &MockJobQueue_SetJobExecutor_Call{Call: _e.mock.On("SetJobExecutor", executor)}
}

func (_c *MockJobQueue_SetJobExecutor_Call) Run(run func(executor interfaces.JobExecutor)) *MockJobQueue_SetJobExecutor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interfaces.JobExecutor))
	})
	return _c
}

func (_c *MockJobQueue_SetJobExecutor_Call) Return() *MockJobQueue_SetJobExecutor_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockJobQueue_SetJobExecutor_Call) RunAndReturn(run func(interfaces.JobExecutor)) *MockJobQueue_SetJobExecutor_Call {
	_c.Run(run)
	return _c
}

// Start provides a mock function with given fields: ctx
func (_m *MockJobQueue) Start(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockJobQueue_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockJobQueue_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockJobQueue_Expecter) Start(ctx interface{}) *MockJobQueue_Start_Call {
	return &MockJobQueue_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *MockJobQueue_Start_Call) Run(run func(ctx context.Context)) *MockJobQueue_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockJobQueue_Start_Call) Return(_a0 error) *MockJobQueue_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJobQueue_Start_Call) RunAndReturn(run func(context.Context) error) *MockJobQueue_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with no fields
func (_m *MockJobQueue) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockJobQueue_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockJobQueue_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockJobQueue_Expecter) Stop() *MockJobQueue_Stop_Call {
	return &MockJobQueue_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockJobQueue_Stop_Call) Run(run func()) *MockJobQueue_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockJobQueue_Stop_Call) Return(_a0 error) *MockJobQueue_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJobQueue_Stop_Call) RunAndReturn(run func() error) *MockJobQueue_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockJobQueue creates a new instance of MockJobQueue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJobQueue(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJobQueue {
	mock := &MockJobQueue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
